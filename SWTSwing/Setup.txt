For simplicity reasons, it is better to dedicate a new workspace to all the SWTSwing projects.
For example, I created a workspace named "workspace_swtswing".

The folowing instructions are made to develop on Windows, using the win32 port.
It is probably not too dificult to do the same for another platform.

--------------------------------------------------------------------------------

* Set a default JRE of at least Java 6 and the compiler compliance level to 1.4.

* Get SWTSwing from "swtswing.cvs.sourceforge.net:/cvsroot/swtswing" and check
out the modules:

- SWTSwing
- SWTSwingTests


* Get SWT from ":pserver:anonymous@dev.eclipse.org:/cvsroot/eclipse" and check
out the modules:

on "HEAD":
- org.eclipse.swt.snippets

on "R3_2" version:
- org.eclipse.swt
- org.eclipse.swt.examples
- org.eclipse.swt.win32.win32.x86

To compile SWT itself, copy "org.eclipse.swt/.classpath_win32" to
"org.eclipse.swt/.classpath"

--------------------------------------------------------------------------------

In Eclipse, you can create two "Run" configurations to test SWT's snippets with
and without SWTSwing (this example is for win32):

- Without SWTSwing:
  Project: SWTSwingTests
  Main class: chrriis.swtswing.SnippetLauncher
  VM Arguments: -Dswt.swing.snippets=defined -Djava.library.path=${workspace_loc:org.eclipse.swt.win32.win32.x86}
  ClassPath: add "org.eclipse.swt"

  Note: if the version of the DLL is not the correct one (an exception is
  raised), you should add the VM argument "-Dswt.version=3232" where you replace
  "3232" with the appropriate version number.

- With SWTSwing:
  Project: SWTSwingTests
  Main class: chrriis.swtswing.SnippetLauncher
  VM Arguments: -Dswt.swing.laf=javax.swing.plaf.metal.MetalLookAndFeel -Dswt.swing.debug=defined -Dswt.swing.snippets=defined
  
... then open the "chrriis.swtswing.SnippetLauncher" class and adjust the
snippet number that is located below the snippet definitions.
